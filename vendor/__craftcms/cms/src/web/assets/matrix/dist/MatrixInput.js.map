{"version":3,"file":"MatrixInput.js","mappings":"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","sources":["webpack:///./MatrixInput.js"],"sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Matrix input class\n     */\n    Craft.MatrixInput = Garnish.Base.extend({\n        id: null,\n        blockTypes: null,\n        blockTypesByHandle: null,\n        inputNamePrefix: null,\n        inputIdPrefix: null,\n\n        showingAddBlockMenu: false,\n        addBlockBtnGroupWidth: null,\n        addBlockBtnContainerWidth: null,\n\n        $container: null,\n        $blockContainer: null,\n        $addBlockBtnContainer: null,\n        $addBlockBtnGroup: null,\n        $addBlockBtnGroupBtns: null,\n\n        blockSort: null,\n        blockSelect: null,\n        totalNewBlocks: 0,\n\n        init: function(id, blockTypes, inputNamePrefix, settings) {\n            this.id = id;\n            this.blockTypes = blockTypes;\n            this.inputNamePrefix = inputNamePrefix;\n            this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n\n            // see if settings was actually set to the maxBlocks value\n            if (typeof settings === 'number') {\n                settings = {maxBlocks: settings};\n            }\n            this.setSettings(settings, Craft.MatrixInput.defaults);\n\n            this.$container = $('#' + this.id);\n            this.$blockContainer = this.$container.children('.blocks');\n            this.$addBlockBtnContainer = this.$container.children('.buttons');\n            this.$addBlockBtnGroup = this.$addBlockBtnContainer.children('.btngroup');\n            this.$addBlockBtnGroupBtns = this.$addBlockBtnGroup.children('.btn');\n            this.$addBlockMenuBtn = this.$addBlockBtnContainer.children('.menubtn');\n\n            this.$container.data('matrix', this);\n\n            this.setNewBlockBtn();\n\n            this.blockTypesByHandle = {};\n\n            var i;\n\n            for (i = 0; i < this.blockTypes.length; i++) {\n                var blockType = this.blockTypes[i];\n                this.blockTypesByHandle[blockType.handle] = blockType;\n            }\n\n            var $blocks = this.$blockContainer.children(),\n                collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds();\n\n            this.blockSort = new Garnish.DragSort($blocks, {\n                handle: '> .actions > .move',\n                axis: 'y',\n                filter: () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.blockSort.$targetItem.hasClass('sel')) {\n                        return this.blockSelect.getSelectedItems();\n                    } else {\n                        return this.blockSort.$targetItem;\n                    }\n                },\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                helperOpacity: 0.9,\n                onSortChange: () => {\n                    this.blockSelect.resetItemOrder();\n                },\n            });\n\n            this.blockSelect = new Garnish.Select(this.$blockContainer, $blocks, {\n                multi: true,\n                vertical: true,\n                handle: '> .checkbox, > .titlebar',\n                checkboxMode: true\n            });\n\n            for (i = 0; i < $blocks.length; i++) {\n                var $block = $($blocks[i]),\n                    blockId = $block.data('id');\n\n                // Is this a new block?\n                var newMatch = (typeof blockId === 'string' && blockId.match(/new(\\d+)/));\n\n                if (newMatch && newMatch[1] > this.totalNewBlocks) {\n                    this.totalNewBlocks = parseInt(newMatch[1]);\n                }\n\n                var block = new MatrixBlock(this, $block);\n\n                if (block.id && $.inArray('' + block.id, collapsedBlocks) !== -1) {\n                    block.collapse();\n                }\n            }\n\n            this.addListener(this.$addBlockBtnGroupBtns, 'click', function(ev) {\n                var type = $(ev.target).data('type');\n                this.addBlock(type);\n            });\n\n            new Garnish.MenuBtn(this.$addBlockMenuBtn,\n                {\n                    onOptionSelect: option => {\n                        this.addBlock($(option).data('type'));\n                    },\n                });\n\n            this.updateAddBlockBtn();\n\n            this.addListener(this.$container, 'resize', 'setNewBlockBtn');\n            Garnish.$doc.ready(this.setNewBlockBtn.bind(this));\n\n            this.trigger('afterInit');\n        },\n\n        setNewBlockBtn: function() {\n            // Do we know what the button group width is yet?\n            if (!this.addBlockBtnGroupWidth) {\n                this.addBlockBtnGroupWidth = this.$addBlockBtnGroup.width();\n\n                if (!this.addBlockBtnGroupWidth) {\n                    return;\n                }\n            }\n\n            // Only check if the container width has resized\n            if (this.addBlockBtnContainerWidth !== (this.addBlockBtnContainerWidth = this.$addBlockBtnContainer.width())) {\n                if (this.addBlockBtnGroupWidth > this.addBlockBtnContainerWidth) {\n                    if (!this.showingAddBlockMenu) {\n                        this.$addBlockBtnGroup.addClass('hidden');\n                        this.$addBlockMenuBtn.removeClass('hidden');\n                        this.showingAddBlockMenu = true;\n                    }\n                } else {\n                    if (this.showingAddBlockMenu) {\n                        this.$addBlockMenuBtn.addClass('hidden');\n                        this.$addBlockBtnGroup.removeClass('hidden');\n                        this.showingAddBlockMenu = false;\n\n                        // Because Safari is awesome\n                        if (navigator.userAgent.indexOf('Safari') !== -1) {\n                            Garnish.requestAnimationFrame(() => {\n                                this.$addBlockBtnGroup.css('opacity', 0.99);\n\n                                Garnish.requestAnimationFrame(() => {\n                                    this.$addBlockBtnGroup.css('opacity', '');\n                                });\n                            });\n                        }\n                    }\n                }\n            }\n        },\n\n        canAddMoreBlocks: function() {\n            return (!this.maxBlocks || this.$blockContainer.children().length < this.maxBlocks);\n        },\n\n        updateAddBlockBtn: function() {\n            var i, block;\n\n            if (this.canAddMoreBlocks()) {\n                this.$addBlockBtnGroup.removeClass('disabled');\n                this.$addBlockMenuBtn.removeClass('disabled');\n\n                for (i = 0; i < this.blockSelect.$items.length; i++) {\n                    block = this.blockSelect.$items.eq(i).data('block');\n\n                    if (block) {\n                        block.$actionMenu.find('a[data-action=add]').parent().removeClass('disabled');\n                    }\n                }\n            } else {\n                this.$addBlockBtnGroup.addClass('disabled');\n                this.$addBlockMenuBtn.addClass('disabled');\n\n                for (i = 0; i < this.blockSelect.$items.length; i++) {\n                    block = this.blockSelect.$items.eq(i).data('block');\n\n                    if (block) {\n                        block.$actionMenu.find('a[data-action=add]').parent().addClass('disabled');\n                    }\n                }\n            }\n        },\n\n        addBlock: function(type, $insertBefore, autofocus) {\n            if (!this.canAddMoreBlocks()) {\n                return;\n            }\n\n            this.totalNewBlocks++;\n\n            var id = 'new' + this.totalNewBlocks;\n\n            var html = `\n<div class=\"matrixblock\" data-id=\"${id}\" data-type=\"${type}\">\n  <input type=\"hidden\" name=\"${this.inputNamePrefix}[sortOrder][]\" value=\"${id}\"/>\n  <input type=\"hidden\" name=\"${this.inputNamePrefix}[blocks][${id}][type]\" value=\"${type}\"/>\n  <input type=\"hidden\" name=\"${this.inputNamePrefix}[blocks][${id}][enabled]\" value=\"1\"/>\n  <div class=\"titlebar\">\n    <div class=\"blocktype\">${this.getBlockTypeByHandle(type).name}</div>\n    <div class=\"preview\"></div>\n  </div>\n  <div class=\"checkbox\" title=\"${Craft.t('app', 'Select')}\"></div>\n  <div class=\"actions\">\n    <div class=\"status off\" title=\"${Craft.t('app', 'Disabled')}\"></div>\n    <button type=\"button\" class=\"btn settings icon menubtn\" title=\"${Craft.t('app', 'Actions')}\"></button> \n    <div class=\"menu\">\n      <ul class=\"padded\">\n        <li><a data-icon=\"collapse\" data-action=\"collapse\">${Craft.t('app', 'Collapse')}</a></li>\n        <li class=\"hidden\"><a data-icon=\"expand\" data-action=\"expand\">${Craft.t('app', 'Expand')}</a></li>\n        <li><a data-icon=\"disabled\" data-action=\"disable\">${Craft.t('app', 'Disable')}</a></li>\n        <li class=\"hidden\"><a data-icon=\"enabled\" data-action=\"enable\">${Craft.t('app', 'Enable')}</a></li>\n        <li><a data-icon=\"uarr\" data-action=\"moveUp\">${Craft.t('app', 'Move up')}</a></li>\n        <li><a data-icon=\"darr\" data-action=\"moveDown\">${Craft.t('app', 'Move down')}</a></li>\n      </ul>`;\n\n            if (!this.settings.staticBlocks) {\n                html += `\n      <hr class=\"padded\"/>\n      <ul class=\"padded\">\n        <li><a class=\"error\" data-icon=\"remove\" data-action=\"delete\">${Craft.t('app', 'Delete')}</a></li>\n      </ul>\n      <hr class=\"padded\"/>\n      <ul class=\"padded\">`;\n\n                for (var i = 0; i < this.blockTypes.length; i++) {\n                    var blockType = this.blockTypes[i];\n                    html += `\n        <li><a data-icon=\"plus\" data-action=\"add\" data-type=\"${blockType.handle}\">${Craft.t('app', 'Add {type} above', {type: blockType.name})}</a></li>`;\n                }\n\n                html += `\n      </ul>`\n            }\n\n            html += `\n    </div>\n    <a class=\"move icon\" title=\"${Craft.t('app', 'Reorder')}\" role=\"button\"></a>\n  </div>\n</div>`;\n\n            var $block = $(html);\n\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            if ($insertBefore) {\n                $block.insertBefore($insertBefore);\n            } else {\n                $block.appendTo(this.$blockContainer);\n            }\n\n            var $fieldsContainer = $('<div class=\"fields\"/>').appendTo($block),\n                bodyHtml = this.getParsedBlockHtml(this.blockTypesByHandle[type].bodyHtml, id),\n                footHtml = this.getParsedBlockHtml(this.blockTypesByHandle[type].footHtml, id);\n\n            $(bodyHtml).appendTo($fieldsContainer);\n\n            this.trigger('blockAdded', {\n                $block: $block\n            });\n\n            // Animate the block into position\n            $block.css(this.getHiddenBlockCss($block)).velocity({\n                opacity: 1,\n                'margin-bottom': 10\n            }, 'fast', () => {\n                $block.css('margin-bottom', '');\n                Garnish.$bod.append(footHtml);\n                Craft.initUiElements($fieldsContainer);\n                new MatrixBlock(this, $block);\n                this.blockSort.addItems($block);\n                this.blockSelect.addItems($block);\n                this.updateAddBlockBtn();\n\n                Garnish.requestAnimationFrame(function() {\n                    if (typeof autofocus === 'undefined' || autofocus) {\n                        // Scroll to the block\n                        Garnish.scrollContainerToElement($block);\n                        // Focus on the first text input\n                        $block.find('.text,[contenteditable]').first().trigger('focus');\n                    }\n\n                    // Resume the draft editor\n                    if (window.draftEditor) {\n                        window.draftEditor.resume();\n                    }\n                });\n            });\n        },\n\n        getBlockTypeByHandle: function(handle) {\n            for (var i = 0; i < this.blockTypes.length; i++) {\n                if (this.blockTypes[i].handle === handle) {\n                    return this.blockTypes[i];\n                }\n            }\n        },\n\n        collapseSelectedBlocks: function() {\n            this.callOnSelectedBlocks('collapse');\n        },\n\n        expandSelectedBlocks: function() {\n            this.callOnSelectedBlocks('expand');\n        },\n\n        disableSelectedBlocks: function() {\n            this.callOnSelectedBlocks('disable');\n        },\n\n        enableSelectedBlocks: function() {\n            this.callOnSelectedBlocks('enable');\n        },\n\n        deleteSelectedBlocks: function() {\n            this.callOnSelectedBlocks('selfDestruct');\n        },\n\n        callOnSelectedBlocks: function(fn) {\n            for (var i = 0; i < this.blockSelect.$selectedItems.length; i++) {\n                this.blockSelect.$selectedItems.eq(i).data('block')[fn]();\n            }\n        },\n\n        getHiddenBlockCss: function($block) {\n            return {\n                opacity: 0,\n                marginBottom: -($block.outerHeight())\n            };\n        },\n\n        getParsedBlockHtml: function(html, id) {\n            if (typeof html === 'string') {\n                return html.replace(new RegExp(`__BLOCK_${this.settings.placeholderKey}__`, 'g'), id);\n            } else {\n                return '';\n            }\n        },\n\n        get maxBlocks() {\n            return this.settings.maxBlocks;\n        },\n    }, {\n        defaults: {\n            placeholderKey: null,\n            maxBlocks: null,\n            staticBlocks: false,\n        },\n\n        collapsedBlockStorageKey: 'Craft-' + Craft.systemUid + '.MatrixInput.collapsedBlocks',\n\n        getCollapsedBlockIds: function() {\n            if (typeof localStorage[Craft.MatrixInput.collapsedBlockStorageKey] === 'string') {\n                return Craft.filterArray(localStorage[Craft.MatrixInput.collapsedBlockStorageKey].split(','));\n            } else {\n                return [];\n            }\n        },\n\n        setCollapsedBlockIds: function(ids) {\n            localStorage[Craft.MatrixInput.collapsedBlockStorageKey] = ids.join(',');\n        },\n\n        rememberCollapsedBlockId: function(id) {\n            if (typeof Storage !== 'undefined') {\n                var collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds();\n\n                if ($.inArray('' + id, collapsedBlocks) === -1) {\n                    collapsedBlocks.push(id);\n                    Craft.MatrixInput.setCollapsedBlockIds(collapsedBlocks);\n                }\n            }\n        },\n\n        forgetCollapsedBlockId: function(id) {\n            if (typeof Storage !== 'undefined') {\n                var collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds(),\n                    collapsedBlocksIndex = $.inArray('' + id, collapsedBlocks);\n\n                if (collapsedBlocksIndex !== -1) {\n                    collapsedBlocks.splice(collapsedBlocksIndex, 1);\n                    Craft.MatrixInput.setCollapsedBlockIds(collapsedBlocks);\n                }\n            }\n        }\n    });\n\n    var MatrixBlock = Garnish.Base.extend({\n        matrix: null,\n        $container: null,\n        $titlebar: null,\n        $fieldsContainer: null,\n        $previewContainer: null,\n        $actionMenu: null,\n        $collapsedInput: null,\n\n        isNew: null,\n        id: null,\n\n        collapsed: false,\n\n        init: function(matrix, $container) {\n            this.matrix = matrix;\n            this.$container = $container;\n            this.$titlebar = $container.children('.titlebar');\n            this.$previewContainer = this.$titlebar.children('.preview');\n            this.$fieldsContainer = $container.children('.fields');\n\n            this.$container.data('block', this);\n\n            this.id = this.$container.data('id');\n            this.isNew = (!this.id || (typeof this.id === 'string' && this.id.substr(0, 3) === 'new'));\n\n            var $menuBtn = this.$container.find('> .actions > .settings'),\n                menuBtn = new Garnish.MenuBtn($menuBtn);\n\n            this.$actionMenu = menuBtn.menu.$container;\n\n            menuBtn.menu.settings.onOptionSelect = this.onMenuOptionSelect.bind(this);\n\n            menuBtn.menu.on('show', () => {\n                this.$container.addClass('active');\n                if (this.$container.prev('.matrixblock').length) {\n                    this.$actionMenu.find('a[data-action=moveUp]:first').parent().removeClass('hidden');\n                } else {\n                    this.$actionMenu.find('a[data-action=moveUp]:first').parent().addClass('hidden');\n                }\n                if (this.$container.next('.matrixblock').length) {\n                    this.$actionMenu.find('a[data-action=moveDown]:first').parent().removeClass('hidden');\n                } else {\n                    this.$actionMenu.find('a[data-action=moveDown]:first').parent().addClass('hidden');\n                }\n            });\n            menuBtn.menu.on('hide', () => {\n                this.$container.removeClass('active');\n            });\n\n            // Was this block already collapsed?\n            if (Garnish.hasAttr(this.$container, 'data-collapsed')) {\n                this.collapse();\n            }\n\n            this._handleTitleBarClick = function(ev) {\n                ev.preventDefault();\n                this.toggle();\n            };\n\n            this.addListener(this.$titlebar, 'doubletap', this._handleTitleBarClick);\n        },\n\n        toggle: function() {\n            if (this.collapsed) {\n                this.expand();\n            } else {\n                this.collapse(true);\n            }\n        },\n\n        collapse: function(animate) {\n            if (this.collapsed) {\n                return;\n            }\n\n            this.$container.addClass('collapsed');\n\n            var previewHtml = '',\n                $fields = this.$fieldsContainer.children().children();\n\n            for (var i = 0; i < $fields.length; i++) {\n                var $field = $($fields[i]),\n                    $inputs = $field.children('.input').find('select,input[type!=\"hidden\"],textarea,.label'),\n                    inputPreviewText = '';\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $($inputs[j]),\n                        value;\n\n                    if ($input.hasClass('label')) {\n                        var $maybeLightswitchContainer = $input.parent().parent();\n\n                        if ($maybeLightswitchContainer.hasClass('lightswitch') && (\n                            ($maybeLightswitchContainer.hasClass('on') && $input.hasClass('off')) ||\n                            (!$maybeLightswitchContainer.hasClass('on') && $input.hasClass('on'))\n                        )) {\n                            continue;\n                        }\n\n                        value = $input.text();\n                    } else {\n                        value = Craft.getText(Garnish.getInputPostVal($input));\n                    }\n\n                    if (value instanceof Array) {\n                        value = value.join(', ');\n                    }\n\n                    if (value) {\n                        value = Craft.trim(Craft.escapeHtml(value));\n\n                        if (value) {\n                            if (inputPreviewText) {\n                                inputPreviewText += ', ';\n                            }\n\n                            inputPreviewText += value;\n                        }\n                    }\n                }\n\n                if (inputPreviewText) {\n                    previewHtml += (previewHtml ? ' <span>|</span> ' : '') + inputPreviewText;\n                }\n            }\n\n            this.$previewContainer.html(previewHtml);\n\n            this.$fieldsContainer.velocity('stop');\n            this.$container.velocity('stop');\n\n            if (animate) {\n                this.$fieldsContainer.velocity('fadeOut', {duration: 'fast'});\n                this.$container.velocity({height: 16}, 'fast');\n            } else {\n                this.$previewContainer.show();\n                this.$fieldsContainer.hide();\n                this.$container.css({height: 16});\n            }\n\n            setTimeout(() => {\n                this.$actionMenu.find('a[data-action=collapse]:first').parent().addClass('hidden');\n                this.$actionMenu.find('a[data-action=expand]:first').parent().removeClass('hidden');\n            }, 200);\n\n            // Remember that?\n            if (!this.isNew) {\n                Craft.MatrixInput.rememberCollapsedBlockId(this.id);\n            } else {\n                if (!this.$collapsedInput) {\n                    this.$collapsedInput = $('<input type=\"hidden\" name=\"' + this.matrix.inputNamePrefix + '[blocks][' + this.id + '][collapsed]\" value=\"1\"/>').appendTo(this.$container);\n                } else {\n                    this.$collapsedInput.val('1');\n                }\n            }\n\n            this.collapsed = true;\n        },\n\n        expand: function() {\n            if (!this.collapsed) {\n                return;\n            }\n\n            this.$container.removeClass('collapsed');\n\n            this.$fieldsContainer.velocity('stop');\n            this.$container.velocity('stop');\n\n            var collapsedContainerHeight = this.$container.height();\n            this.$container.height('auto');\n            this.$fieldsContainer.show();\n            var expandedContainerHeight = this.$container.height();\n            var displayValue = this.$fieldsContainer.css('display') || 'block';\n            this.$container.height(collapsedContainerHeight);\n            this.$fieldsContainer.hide().velocity('fadeIn', {duration: 'fast', display: displayValue});\n            this.$container.velocity({height: expandedContainerHeight}, 'fast', () => {\n                this.$previewContainer.html('');\n                this.$container.height('auto');\n            });\n\n            setTimeout(() => {\n                this.$actionMenu.find('a[data-action=collapse]:first').parent().removeClass('hidden');\n                this.$actionMenu.find('a[data-action=expand]:first').parent().addClass('hidden');\n            }, 200);\n\n            // Remember that?\n            if (!this.isNew && typeof Storage !== 'undefined') {\n                var collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds(),\n                    collapsedBlocksIndex = $.inArray('' + this.id, collapsedBlocks);\n\n                if (collapsedBlocksIndex !== -1) {\n                    collapsedBlocks.splice(collapsedBlocksIndex, 1);\n                    Craft.MatrixInput.setCollapsedBlockIds(collapsedBlocks);\n                }\n            }\n\n            if (!this.isNew) {\n                Craft.MatrixInput.forgetCollapsedBlockId(this.id);\n            } else if (this.$collapsedInput) {\n                this.$collapsedInput.val('');\n            }\n\n            this.collapsed = false;\n        },\n\n        disable: function() {\n            this.$container.children('input[name$=\"[enabled]\"]:first').val('');\n            this.$container.addClass('disabled');\n\n            setTimeout(() => {\n                this.$actionMenu.find('a[data-action=disable]:first').parent().addClass('hidden');\n                this.$actionMenu.find('a[data-action=enable]:first').parent().removeClass('hidden');\n            }, 200);\n\n            this.collapse(true);\n        },\n\n        enable: function() {\n            this.$container.children('input[name$=\"[enabled]\"]:first').val('1');\n            this.$container.removeClass('disabled');\n\n            setTimeout(() => {\n                this.$actionMenu.find('a[data-action=disable]:first').parent().removeClass('hidden');\n                this.$actionMenu.find('a[data-action=enable]:first').parent().addClass('hidden');\n            }, 200);\n        },\n\n        moveUp: function() {\n            let $prev = this.$container.prev('.matrixblock');\n            if ($prev.length) {\n                this.$container.insertBefore($prev);\n                this.matrix.blockSelect.resetItemOrder();\n            }\n        },\n\n        moveDown: function() {\n            let $next = this.$container.next('.matrixblock');\n            if ($next.length) {\n                this.$container.insertAfter($next);\n                this.matrix.blockSelect.resetItemOrder();\n            }\n        },\n\n        onMenuOptionSelect: function(option) {\n            var batchAction = (this.matrix.blockSelect.totalSelected > 1 && this.matrix.blockSelect.isSelected(this.$container)),\n                $option = $(option);\n\n            switch ($option.data('action')) {\n                case 'collapse': {\n                    if (batchAction) {\n                        this.matrix.collapseSelectedBlocks();\n                    } else {\n                        this.collapse(true);\n                    }\n\n                    break;\n                }\n\n                case 'expand': {\n                    if (batchAction) {\n                        this.matrix.expandSelectedBlocks();\n                    } else {\n                        this.expand();\n                    }\n\n                    break;\n                }\n\n                case 'disable': {\n                    if (batchAction) {\n                        this.matrix.disableSelectedBlocks();\n                    } else {\n                        this.disable();\n                    }\n\n                    break;\n                }\n\n                case 'enable': {\n                    if (batchAction) {\n                        this.matrix.enableSelectedBlocks();\n                    } else {\n                        this.enable();\n                        this.expand();\n                    }\n\n                    break;\n                }\n\n                case 'moveUp': {\n                    this.moveUp();\n                    break;\n                }\n\n                case 'moveDown': {\n                    this.moveDown();\n                    break;\n                }\n\n                case 'add': {\n                    var type = $option.data('type');\n                    this.matrix.addBlock(type, this.$container);\n                    break;\n                }\n\n                case 'delete': {\n                    if (batchAction) {\n                        if (confirm(Craft.t('app', 'Are you sure you want to delete the selected blocks?'))) {\n                            this.matrix.deleteSelectedBlocks();\n                        }\n                    } else {\n                        this.selfDestruct();\n                    }\n\n                    break;\n                }\n            }\n        },\n\n        selfDestruct: function() {\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            this.$container.velocity(this.matrix.getHiddenBlockCss(this.$container), 'fast', () => {\n                this.$container.remove();\n                this.matrix.updateAddBlockBtn();\n\n                // Resume the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.resume();\n                }\n\n                this.matrix.trigger('blockDeleted', {\n                    $block: this.$container,\n                });\n            });\n        }\n    });\n})(jQuery);\n"],"names":["$","Craft","MatrixInput","Garnish","Base","extend","id","blockTypes","blockTypesByHandle","inputNamePrefix","inputIdPrefix","showingAddBlockMenu","addBlockBtnGroupWidth","addBlockBtnContainerWidth","$container","$blockContainer","$addBlockBtnContainer","$addBlockBtnGroup","$addBlockBtnGroupBtns","blockSort","blockSelect","totalNewBlocks","init","settings","i","this","formatInputId","maxBlocks","setSettings","defaults","children","$addBlockMenuBtn","data","setNewBlockBtn","length","blockType","handle","$blocks","collapsedBlocks","getCollapsedBlockIds","DragSort","axis","filter","$targetItem","hasClass","getSelectedItems","collapseDraggees","magnetStrength","helperLagBase","helperOpacity","onSortChange","resetItemOrder","Select","multi","vertical","checkboxMode","$block","blockId","newMatch","match","parseInt","block","MatrixBlock","inArray","collapse","addListener","ev","type","target","addBlock","MenuBtn","onOptionSelect","option","updateAddBlockBtn","$doc","ready","bind","trigger","width","addClass","removeClass","navigator","userAgent","indexOf","requestAnimationFrame","css","canAddMoreBlocks","$items","eq","$actionMenu","find","parent","$insertBefore","autofocus","html","getBlockTypeByHandle","name","t","staticBlocks","window","draftEditor","pause","insertBefore","appendTo","$fieldsContainer","bodyHtml","getParsedBlockHtml","footHtml","getHiddenBlockCss","velocity","opacity","$bod","append","initUiElements","addItems","scrollContainerToElement","first","resume","collapseSelectedBlocks","callOnSelectedBlocks","expandSelectedBlocks","disableSelectedBlocks","enableSelectedBlocks","deleteSelectedBlocks","fn","$selectedItems","marginBottom","outerHeight","replace","RegExp","placeholderKey","collapsedBlockStorageKey","systemUid","localStorage","filterArray","split","setCollapsedBlockIds","ids","join","rememberCollapsedBlockId","Storage","push","forgetCollapsedBlockId","collapsedBlocksIndex","splice","matrix","$titlebar","$previewContainer","$collapsedInput","isNew","collapsed","substr","$menuBtn","menuBtn","menu","onMenuOptionSelect","on","prev","next","hasAttr","_handleTitleBarClick","preventDefault","toggle","expand","animate","previewHtml","$fields","$inputs","inputPreviewText","j","value","$input","$maybeLightswitchContainer","text","getText","getInputPostVal","Array","trim","escapeHtml","duration","height","show","hide","setTimeout","val","collapsedContainerHeight","expandedContainerHeight","displayValue","display","disable","enable","moveUp","$prev","moveDown","$next","insertAfter","batchAction","totalSelected","isSelected","$option","confirm","selfDestruct","remove","jQuery"],"sourceRoot":""}